<?php

if (function_exists('xdebug_disable'))
    xdebug_disable();

require('../../src/SettingsManager/settingsmanager.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-08 at 17:48:59.
 */
class settingsManagerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SettingsManager\settingsManager
     */
    protected $object;
    
    private $_testData = array(
        'data' => 1,
        'data2' => array(
            'date3' => 4
            )        
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
       $this->object = new SettingsManager\settingsManager($this->_testData);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SettingsManager\settingsManager::get
     * 
     */
    public function testGet()
    {
        $this->assertTrue($this->object->get('data2/date3') == 4);       
    }
    
    /**
     * @expectedException \OutOfBoundsException 
     */
    public function testGetFail() {
        $this->assertTrue($this->object->get('fail') == 4);
    }

    /**
     * @covers SettingsManager\settingsManager::set     
     */
    public function testSet()
    {
        $this->object = new SettingsManager\settingsManager($this->_testData, true);
        
        $this->object->set('data','changed');                
        $this->assertTrue($this->object->get('data') == 'changed');
    }
    
    /**
     * @expectedException SettingsManager\TryToChangeImmutableObjectException
     */
    public function testSetFailWithException() {
        $this->object->set('data','change again');                
        $this->assertTrue($this->object->get('data') == 'change again');
    }

    /**
     * @covers SettingsManager\settingsManager::exists     
     */
    public function testExists()
    {
        $this->assertTrue($this->object->exists('data2/date3'));
    }
    
    /**
     * @covers SettingsManager\settingsManager::exists     
     */
    public function testNotExists()
    {
        $this->assertTrue($this->object->exists('noData') === false);
    }

    /**
     * @covers SettingsManager\settingsManager::clearCache
     * @todo   Implement testClearCache().
     */
    public function testClearCache()
    {
        
    }
}
